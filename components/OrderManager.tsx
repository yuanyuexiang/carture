import React, { useEffect, useState } from 'react';
import { Alert, ScrollView, StyleSheet, Text, View } from 'react-native';
import { useCustomerOrders, useSimpleOrder } from '../hooks/useSimpleOrder';
import { WechatAuth, WechatUserInfo } from '../utils/wechat-auth';
import { SwipeableOrderCard } from './SwipeableOrderCard';

interface OrderManagerProps {
  customerId?: string;
}

export const OrderManager: React.FC<OrderManagerProps> = () => {
  const [wechatUserInfo, setWechatUserInfo] = useState<WechatUserInfo | null>(null);
  const [deletingOrders, setDeletingOrders] = useState<Set<string>>(new Set());

  // Ëé∑ÂèñÂà†Èô§ËÆ¢ÂçïÁöÑhook
  const { deleteOrder } = useSimpleOrder();

  useEffect(() => {
    const userInfo = WechatAuth.getUserInfo();
    if (userInfo) {
      setWechatUserInfo(userInfo);
    }
  }, []);

  const { orders, loading, error, refetch } = useCustomerOrders(
    wechatUserInfo?.openid || null
  );

  // Â§ÑÁêÜÂà†Èô§ËÆ¢Âçï
  const handleDeleteOrder = async (orderId: string) => {
    console.log('üóëÔ∏è OrderManager: Âà†Èô§ËÆ¢Âçï', orderId);
    console.log('üóëÔ∏è OrderManager: ËÆ¢ÂçïIDÁ±ªÂûã:', typeof orderId);
    
    // Ê†áËÆ∞Ëøô‰∏™ËÆ¢ÂçïÊ≠£Âú®Âà†Èô§‰∏≠
    setDeletingOrders(prev => new Set(prev).add(orderId));

    try {
      console.log('üóëÔ∏è OrderManager: Ë∞ÉÁî® deleteOrder hook');
      const result = await deleteOrder(orderId);
      console.log('üóëÔ∏è OrderManager: deleteOrder ËøîÂõûÁªìÊûú:', result);
      
      if (result.success) {
        // Âà†Èô§ÊàêÂäüÔºåÂà∑Êñ∞ËÆ¢ÂçïÂàóË°®
        console.log('‚úÖ ËÆ¢ÂçïÂà†Èô§ÊàêÂäüÔºåÂà∑Êñ∞ÂàóË°®');
        refetch();
        
        // Web ÁéØÂ¢É‰ΩøÁî® alertÔºåÁßªÂä®Á´Ø‰ΩøÁî® Alert.alert
        if (typeof window !== 'undefined') {
          alert('ËÆ¢ÂçïÂà†Èô§ÊàêÂäü');
        } else {
          Alert.alert('ÊàêÂäü', 'ËÆ¢ÂçïÂà†Èô§ÊàêÂäü');
        }
      } else {
        console.error('‚ùå Âà†Èô§Â§±Ë¥•:', result.message);
        if (typeof window !== 'undefined') {
          alert('Âà†Èô§Â§±Ë¥•: ' + (result.message || 'Âà†Èô§ËÆ¢ÂçïÊó∂ÂèëÁîüÈîôËØØ'));
        } else {
          Alert.alert('Âà†Èô§Â§±Ë¥•', result.message || 'Âà†Èô§ËÆ¢ÂçïÊó∂ÂèëÁîüÈîôËØØ');
        }
      }
    } catch (err) {
      console.error('‚ùå Âà†Èô§ËÆ¢ÂçïÂºÇÂ∏∏:', err);
      // ÊâìÂç∞Êõ¥ËØ¶ÁªÜÁöÑÈîôËØØ‰ø°ÊÅØ
      if (err instanceof Error) {
        console.error('ÈîôËØØÊ∂àÊÅØ:', err.message);
        console.error('ÈîôËØØÂ†ÜÊ†à:', err.stack);
      }
      
      if (typeof window !== 'undefined') {
        alert('Âà†Èô§Â§±Ë¥•: Âà†Èô§ËÆ¢ÂçïÊó∂ÂèëÁîüÈîôËØØ');
      } else {
        Alert.alert('Âà†Èô§Â§±Ë¥•', 'Âà†Èô§ËÆ¢ÂçïÊó∂ÂèëÁîüÈîôËØØ');
      }
    } finally {
      // ÁßªÈô§Âà†Èô§‰∏≠Áä∂ÊÄÅ
      setDeletingOrders(prev => {
        const newSet = new Set(prev);
        newSet.delete(orderId);
        return newSet;
      });
    }
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <Text style={styles.loadingText}>Âä†ËΩΩËÆ¢Âçï‰∏≠...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>ËÆ¢ÂçïÂä†ËΩΩÂ§±Ë¥•</Text>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>ÊàëÁöÑËÆ¢Âçï</Text>
      </View>

      {orders.length === 0 ? (
        <View style={styles.emptyContainer}>
          <Text style={styles.emptyText}>ÊöÇÊó†ËÆ¢Âçï</Text>
        </View>
      ) : (
        orders.map((order: any) => (
          <SwipeableOrderCard
            key={order.id}
            order={order}
            onDelete={handleDeleteOrder}
            deleting={deletingOrders.has(order.id)}
          />
        ))
      )}
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  header: {
    paddingVertical: 16,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
    marginBottom: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#212529',
  },
  emptyContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyText: {
    fontSize: 16,
    color: '#6c757d',
  },
  loadingText: {
    textAlign: 'center',
    fontSize: 16,
    color: '#6c757d',
    padding: 20,
  },
  errorText: {
    textAlign: 'center',
    fontSize: 16,
    color: '#e74c3c',
    padding: 20,
  },
});

export default OrderManager;
